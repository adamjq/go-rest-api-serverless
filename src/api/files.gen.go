// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"io/ioutil"
	"net/http"
	"strings"
	"time"
)

// File defines model for File.
type File struct {
	CreatedDateTime  time.Time `json:"createdDateTime"`
	CustomerId       string    `json:"customerId"`
	Description      *string   `json:"description,omitempty"`
	Id               string    `json:"id"`
	Location         string    `json:"location"`
	ModifiedDateTime time.Time `json:"modifiedDateTime"`
	Name             string    `json:"name"`
	Status           string    `json:"status"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(req *http.Request, ctx context.Context) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// HTTP client with any customized settings, such as certificate chains.
	Client http.Client

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetFile request
	GetFile(ctx context.Context, id string) (*http.Response, error)
}

func (c *Client) GetFile(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetFileRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetFileRequest generates requests for GetFile
func NewGetFileRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/files/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses returns a ClientWithResponses with a default Client:
func NewClientWithResponses(server string) *ClientWithResponses {
	return &ClientWithResponses{
		ClientInterface: &Client{
			Client: http.Client{},
			Server: server,
		},
	}
}

// NewClientWithResponsesAndRequestEditorFunc takes in a RequestEditorFn callback function and returns a ClientWithResponses with a default Client:
func NewClientWithResponsesAndRequestEditorFunc(server string, reqEditorFn RequestEditorFn) *ClientWithResponses {
	return &ClientWithResponses{
		ClientInterface: &Client{
			Client:        http.Client{},
			Server:        server,
			RequestEditor: reqEditorFn,
		},
	}
}

type getFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *File
}

// Status returns HTTPResponse.Status
func (r getFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetFileWithResponse request returning *GetFileResponse
func (c *ClientWithResponses) GetFileWithResponse(ctx context.Context, id string) (*getFileResponse, error) {
	rsp, err := c.GetFile(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParsegetFileResponse(rsp)
}

// ParsegetFileResponse parses an HTTP response from a GetFileWithResponse call
func ParsegetFileResponse(rsp *http.Response) (*getFileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &File{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}
	case rsp.StatusCode == 404:
		break // No content-type
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (GET /files/{id})
	GetFile(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFile(ctx, id)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/files/:id", wrapper.GetFile)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RUX0/bOhT/Kta5V7ovaRIKdyJ5Y7SbuiENMfaEeHDjk8assT37hIFQvvt0nEJLm2na",
	"pL20dW2f8/vn8wSVbZ01aChA+QSharCV8ec7vUb+Vhgqrx1pa6CM/6aQgPPWoSeN8WzlURKqmSS81u3I",
	"tesGBekWA8nWCWpQ1HqN4rsMYnMXEqitbyVBCUoSTvg4JECPDqGEQF6bFfQJVF0g26JfqMM255s9oRUa",
	"0rVGz2DxQbaO2cBRhUW+rE8n03xaTE4KVU1OpXwzUcX/RYXFtJbFchdJ12k1BuJV230UZ2JnLWz9wjcd",
	"K6XVuMp/ncPaVnKcwMVmZxe70EZ8PubPobB421VfkbKP+DhKq7WKsf9ZJtYykOic+q1gGPmzLryz78NW",
	"T9dYsqkzq7GigSR1MeNouhbKG/hyefHpbDafQQJX8w/z8+v5DG4PbvYJePzWaY+KL0UHdpK7Qbtjwohi",
	"ycG7esGzbWiXd1gR9NxRm9qOxPFywZ6Jzq2tVNqshDRKeCSv8Z6XLElg8pqiIJy+IM4uF5DAPfowlDlK",
	"cxbEOjTSaSjhOM3TKY8CSU1UKIuFsietel6ukA7BXCF13gQhB7OXMqAS1ghN/4W9xPOAidrwS4f3SHEi",
	"cT8vWyT0Acqb/fqLlxJseOxBVtRIVQMsEPstqXk2oByc2VpFvsNkMwYZ/S9eUX/Ll4OzJgyTcJrncSBa",
	"Q2gif+ncWg8mZ3dheG7b+v96rKGEf7LtHM42QziLfKOxrzlGVs9d2ZOT/GQ8+PGkshiEsSTwQQdKYzZJ",
	"rli9WApu+77vfwQAAP//U0u5UQoGAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
