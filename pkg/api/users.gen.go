// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Input for creating a user.
type CreateUserInput struct {
	// Name of the user.
	Name string `json:"name"`
}

// Input for updating a user.
type UpdateUserInput struct {
	// Name of the user.
	Name string `json:"name"`
}

// User.
type User struct {
	// Name of the user.
	Name string `json:"name"`

	// User identifier.
	UserID openapi_types.UUID `json:"userID"`
}

// Response for list of Users
type UsersList = []User

// UserID defines model for userID.
type UserID = openapi_types.UUID

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody = CreateUserInput

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody = UpdateUserInput

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of user.
	// (GET /users)
	ListUsers(ctx echo.Context) error
	// Create an user.
	// (POST /users)
	CreateUser(ctx echo.Context) error
	// Deletes a user.
	// (DELETE /users/{userID})
	DeleteUser(ctx echo.Context, userID UserID) error
	// Get an user.
	// (GET /users/{userID})
	GetUser(ctx echo.Context, userID UserID) error
	// Update an user.
	// (PUT /users/{userID})
	UpdateUser(ctx echo.Context, userID UserID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListUsers converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsers(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userID", runtime.ParamLocationPath, ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx, userID)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userID", runtime.ParamLocationPath, ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, userID)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userID", runtime.ParamLocationPath, ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx, userID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/users", wrapper.ListUsers)
	router.POST(baseURL+"/users", wrapper.CreateUser)
	router.DELETE(baseURL+"/users/:userID", wrapper.DeleteUser)
	router.GET(baseURL+"/users/:userID", wrapper.GetUser)
	router.PUT(baseURL+"/users/:userID", wrapper.UpdateUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9SXe4/aRhDAv8pqGumkygZDL23gPziuEVLUpJdDShVOp8E7wEb2rru7JEeRv3u16wcP",
	"m1zU3knJX4b1zM7Mbx4MO4hVmilJ0hoY7iBDjSlZ0v7bxpCeTtwnTibWIrNCSRjClJO0YilIM7VkTgoC",
	"oAdMs4RgCL2YBtFi+SrsR/1BeDngcfgK8deQD14OYhr0lzhYQADCXZWhXUMAElOnWRoMQNPfG6GJw9Dq",
	"DQVg4jWl6DxZKp2idbIbwSEAu82cprFayBXkeV4J+wiuNKGlmbtWZhvbEoo7ZkulWexEhVwx9BF1IIBM",
	"q4y0FeTvKnw8veAPTMlRsGuq9fYoxmrR4uNhfB+Le+9qKbX4RLGFPIBZxr/V+Y0T/b6cd1XRMDh7XueC",
	"syXrDDNR123nvxTsY6V3TKau5a8iMm+EacnsDZlMSUM+uYkw1oHw8q5xLKWe2wtNSxjCT919E3fL4u96",
	"/nltFbXGbdEeQi5V0+JIstG7KbOKpShxVSA3jpMVNqma04SYCQjgM2lT6PWj3iDs9cLoN2dNZSSdxBB+",
	"6USdyGUa7do72/X67tOKWiO2Gy0Nwzrc2gFXKujEphyG4IBVJHSJyV/bjyL3iJW0JL0FzLJExF61+8k4",
	"M7uDSfIYvSI1Htmxq0cOssoHXwBmk6aot3U8J+F4nLgyVX3AXR5AptoqoJhcDKVXZCg50yWiqiEaaPbT",
	"rhyhZOxY8e2TYTkdp/lx0btZnTey0nvSrLQlxI9u4gWpM/k45tmSiDwoS7S7K1o3L5KSkG0ZThN/bsp5",
	"28hE8brMxOGP6sf2CPci3XJu5HfPXN5tID3AImR+DuRx5K0V/UiDeysLNMSZkkzYC8Omk2ajvyb7YwLc",
	"gwvgMrpsorgtG5hxRYZJZRk9CGM7J6Rfk/1KvQbQuhMUS8PBvKiuaPDdrxf/D/HTj5nTxec7GTM+ZX7T",
	"Ot8dNf6zYyYP4CHEFP9R0v2YrtDSF9yG1fMoqvFocn9z/efs+v3t/fjt5C93Vgm8O1rVS/XqZWdNyEl3",
	"RnFMxoRXSlqtknCUJOpL+FaLlV++L36+gAOQt5RmCdrCdBMf7OZAWit9pTjNYcjmMEZ+s8//HAI2h5SM",
	"wVUp8MIn5MF2vGLnMyaC+zuv3ff3fnOaQ+4hTq5/H83e3N5ffvjwHHEeWHj5TBbOpLZskbCMXmm3jyUJ",
	"fKN0kY4kcY/ykG4Ou674i3Ty6jAo3zB5/m8AAAD//9BCelDtDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
