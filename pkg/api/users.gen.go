// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Input for creating a user.
type CreateUserInput struct {
	// Name of the user.
	Name string `json:"name"`
}

// Healthcheck endpoint reponse
type HealthCheckResponse struct {
	Message *string `json:"message,omitempty"`
}

// Input for updating a user.
type UpdateUserInput struct {
	// Name of the user.
	Name string `json:"name"`
}

// User.
type User struct {
	// Name of the user.
	Name string `json:"name"`

	// User identifier.
	UserID openapi_types.UUID `json:"userID"`
}

// Response for list of Users
type UsersList = []User

// UserID defines model for userID.
type UserID = int

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody = CreateUserInput

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody = UpdateUserInput

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Healthcheck.
	// (GET /healthz)
	GetHealth(ctx echo.Context) error
	// Return a list of user.
	// (GET /users)
	ListUsers(ctx echo.Context) error
	// Create an user.
	// (POST /users)
	CreateUser(ctx echo.Context) error
	// Deletes a user.
	// (DELETE /users/{userID})
	DeleteUser(ctx echo.Context, userID UserID) error
	// Get an user.
	// (GET /users/{userID})
	GetUser(ctx echo.Context, userID UserID) error
	// Update an user.
	// (PUT /users/{userID})
	UpdateUser(ctx echo.Context, userID UserID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// ListUsers converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsers(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userID", runtime.ParamLocationPath, ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx, userID)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userID", runtime.ParamLocationPath, ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, userID)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userID", runtime.ParamLocationPath, ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx, userID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/healthz", wrapper.GetHealth)
	router.GET(baseURL+"/users", wrapper.ListUsers)
	router.POST(baseURL+"/users", wrapper.CreateUser)
	router.DELETE(baseURL+"/users/:userID", wrapper.DeleteUser)
	router.GET(baseURL+"/users/:userID", wrapper.GetUser)
	router.PUT(baseURL+"/users/:userID", wrapper.UpdateUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXf2/bNhD9KsStQIBBku0s3Wr/58RZF6BYuzQGOtRBwIhnm61EauS5jWvouw8kJcs/",
	"5DTAYqD7S7b4yLt77+54WkGq80IrVGRhsIKCG54jofH/FhbN1cj9EmhTIwuSWsEArgQqklOJhukpcyiI",
	"AB94XmQIg14E0qEKTnOIQPEcYVCfFYHBfxbSoIABmQVGYNM55twZoWXhkFIRztBAWZb1qvfmwiAnHLtz",
	"VLGgFrfcazbVhqUOKtWMce9dAhEURhdoSKI/Kzi1e8CfPEcXEc1xvW8dFpzre4hqJy0ZqWbgXGwC+hjO",
	"vV2j9P0nTAnKCP5AntH8Yo7p52u0hVa2xX4ApQ7EUIlCS0XMYEDvhpCjtXzmT2l81J9bXdxzZ1yIp3K5",
	"cNAfikvn9r7B8XGdiw5WgzPM5Lokts/qpdjv3k9fxafd03581hdp/IrzX2PRf9lPsX865X1nbKpNzsmV",
	"yUKK7zKzrqVHKbJvpG1Rtk4/L24mLTkiPB4ikIS55+2FwSkM4KdO0x86VS12PP9NVnFj+DJUq1RTvW9x",
	"qNjw3RUjzXKu+CxQbh1PJCmrm4ONeSEhgi9obNh32u31414v7v7mrOkClUMM4Jekm3Sd0pzm3tnO3BfO",
	"N/d7hq0x08IoyzjbqENmidPCRe0ShjvolYABvEYKKN+sAlnezGm36x6pVoTKW+FFkcnUb+18ss7UaqOf",
	"PcZhWz/wFB7uCKbBRWAXec7NchuS+KWOZ/MJXNTir+XY5sGlT50XR+OhSdSW6LccPBR/iGcnHJ9cfGbr",
	"aoHbMoJCt9VDuFYYV34j40owU1FUt4c9apqrqLrQ0NK5Fstno2X3riu3W4C7Ocs9VXrPqkqbIP5eRRGY",
	"OqDHNp8tQqxTtLMKjawMomRILa165N/b6vbZUyIsV0psTi8f2yNsIJ2qi5a3R07vNiI9gSFkcYjI7chb",
	"M/o7Be6t3HOLgmnFJJ1YdjVK2hre/5PAhrgIzrpn+1TcVAXMhEbLlCaGD9JSssP0a6RH8jWC1gkpjFAb",
	"/aI+Yo/fZtj6bxQ/f5vZHQN/kDbjJfNz5+HqWNN/sM2UETzEPOfftHKjxYwTfuXLuH5uRXU+HN1dX/41",
	"vnx/c3f+dvS3e1cD3m19E1Xb68VkjlygSYZpitbGF1qR0Vk8zDL9NX5r5Mx/Cp38fAIbRN5gXmScgul9",
	"+mA1ATRGmwstcAIDNoFzLq4b/ScQsUn9ARAAL7wgD5T4jckXnknhz7x0/9/7OXICpSdxdPn7cPzm5u7s",
	"w4djxLlh4eWRLByQtiqRuIpeGzedZhk8ER3kyDL3qF7i9WbVhQ/WnaXNoHzBlOW/AQAA//++A59TVg8A",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
