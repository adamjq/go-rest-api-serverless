// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Input for creating a user.
type CreateUser struct {
	// Name of the user.
	Name string `json:"name"`
}

// Input for updating a user.
type UpdateUser struct {
	// Name of the user.
	Name string `json:"name"`
}

// User.
type User struct {
	// Attachment identifier.
	Id openapi_types.UUID `json:"id"`

	// Name of the user.
	Name string `json:"name"`
}

// Response for list of Users
type UsersList = []User

// Id defines model for id.
type Id = openapi_types.UUID

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody = CreateUser

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody = UpdateUser

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of user.
	// (GET /users)
	ListUsers(ctx echo.Context) error
	// Create an user.
	// (POST /users)
	CreateUser(ctx echo.Context) error
	// Deletes a user.
	// (DELETE /users/{id})
	DeleteUser(ctx echo.Context, id Id) error
	// Get an user.
	// (GET /users/{id})
	GetUser(ctx echo.Context, id Id) error
	// Update an user.
	// (PUT /users/{id})
	UpdateUser(ctx echo.Context, id Id) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListUsers converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsers(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx, id)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/users", wrapper.ListUsers)
	router.POST(baseURL+"/users", wrapper.CreateUser)
	router.DELETE(baseURL+"/users/:id", wrapper.DeleteUser)
	router.GET(baseURL+"/users/:id", wrapper.GetUser)
	router.PUT(baseURL+"/users/:id", wrapper.UpdateUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXYW/bNhD9K8StQIBBsh0v3Wp/s5OsCFCsXRoDHeogOItnm4VEauSpjWfovw+kZFuO",
	"5aYoEqD9EkXSkffeu3cneg2JyXKjSbOD4RpytJgRkw13Svq/klxiVc7KaBjClSTNaq7ICjMXhSMLEdA9",
	"ZnlKMITThAa92fxV3O/1B/HZQCbxK8TfYzl4OUho0J/jYAYRKL9VjryECDRmfqWSEIGlfwtlScKQbUER",
	"uGRJGXoUc2MzZBhCUYRIXuV+lWOr9ALKstwEB+TnlpBp4tEdMtB5wWJurEh8lNILgYFIByLIrcnJsqKw",
	"TQXt4QZ/YUaePC9pu26nwNjMWuA1qX2s9r3dRpnZJ0oYyggmufwG3IWP+rFwtyKetIJrc9WIGZNlRpqF",
	"2hqs8z3OesQn0bNpE7J9VSD3Rjk+TH1NLjfaUShtqhx7HCHeNwpTFlR7YWkOQ/ilu2vYbm34blC/3GZF",
	"a3FVtYTSc9Oithajd1eCjchQ46Ji7DxlVhwIhwcx5goi+EzWVev6vdNBfHoa9/7w2UxO2kcM4bdOr9Pz",
	"dUZeBrDdsN7/t6BWxlxY7QRu6W4BeKOgD7uSMAQv2EYJW8sUtu33ev6SGM2kQwbM81QlYWn3k/Np1o3p",
	"8Zh6VWmCZPtQ9wCKDYZQfFdkGdrVls8DOkFOXDjvjTAmb8sIctPmgGpaCdRhoUAtha0l2vjxQJrGhKt8",
	"SI7HRq6eTJZGgnLf6340lwcFOX3SgrTVAndD4kgh9oVsqUAZ1d7srpUsq0qkxC0D4SI8d/WIPZC/el3L",
	"3/xqfmzntgvpKgnl7TP7uU2+4K2Krjwm4D7rVgs/0tEhywwdSWG0UHzihJKHnf2a+OcTbydaBGe9s0MZ",
	"bupuFdKQE9qwoHvluPNA5dfEX/FoBHnRInF1NGgMh80WB9o2DhHfLe/Tz5MGqh9knoRKhbPU8YbYqn50",
	"opQR3MeY4X9G+w/mApm+4CreXPdYjUcXd9eXf08u39/cjd9e/OOfbQLe7R296+Wbl50loSTbGSUJORef",
	"G83WpPEoTc2X+K1Vi3CgPvn1BBpC3lCWp8hV6kP5YD0FstbYcyNpCkMxhTHK613ppxCJKWTkHC7qgBeh",
	"IPfcCQs7nzFVMux56e/fh5PRFMog4sXln6PJm5u7sw8fnoNnI8PLZ8pwpLR1d8Q1e2P9tylN4Rujq3Kk",
	"qb/UD+m62XDVT58Hr5qkQsOU5f8BAAD///9TJFW9DQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
